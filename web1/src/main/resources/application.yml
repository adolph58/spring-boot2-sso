auth-server: http://localhost # 认证服务器地址

server:
  port: 8081
  tomcat:
    uri-encoding: UTF-8

# datasource
spring:
  datasource:
        url: jdbc:mysql://192.168.1.54:3306/sso?useSSL=false&useUnicode=true&characterEncoding=utf-8
        username: root
        password: 123456
        driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    database: MYSQL
    show-sql: true
  ## Hibernate ddl auto (validate|create|create-drop|update)
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
# OAuth2 的配置
# loginPath 是一个登录的链接地址
# clientId 和 clientSecret 是由 SSO 认证服务器提供的客户端 ID 和密钥
# accessTokenUri 是取得令牌的链接地址
# userAuthorizationUri 是用户授权确认的链接地址
# keyUri 是当客户端被指定为资源服务器时所用的令牌链接地址
security:
#  ignored: /favicon.ico,/scripts/**,/styles/**,/images/**
#  sessions: ALWAYS
  oauth2:
    sso:
      loginPath: /login
    client:
      client-id: client
      client-secret: secret
      access-token-uri: ${auth-server}/oauth/token
      user-authorization-uri: ${auth-server}/oauth/authorize
      client-authentication-scheme: form
    resource:
      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口
#      resource:
#        jwt:
#          keyUri: http://localhost/oauth/token_key
# Spring Security 的配置
# 此配置中是设计的一些配置参数，它将被安全管理策略配置类调用
# logoutsuccssurl 是一个登出成功的链接地址
securityconfig:
  logoutsuccssurl: /tosignout
  permitall: /rest/**,/bb**
  deniedpage: /deny
  urlroles: /**/new/** = admin;
            /**/edit/** = admin,editor;
            /**/delete/** = admin